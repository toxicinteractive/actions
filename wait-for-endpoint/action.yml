name: "Wait For Endpoint"
description: "Wait for an endpoint to responde with selected status code and optional header value"

inputs:
  url:
    description: The URL to poll
    required: true
  expected-status:
    description: The HTTP status that is expected
    required: true
    default: "200"
  timeout:
    description: The maximum time the polling is allowed to run for (in milliseconds)
    required: true
    default: "60000"
  header-name:
    description: The header to look for
    required: false
  header-value:
    description: The header value to match
    required: false    


runs:
  using: composite

  steps:
    - name: Wait for endpoint
      env: 
        url: ${{ inputs.url }}
        expectedStatus: ${{ inputs.expected-status }}
        timeout: ${{ inputs.timeout }}
        headerName: ${{ inputs.header-name }}
        expectedHeaderValue: ${{ inputs.header-value }}
      shell: bash
      run: |
        declare -i time=0
        echo "Timeout is set to $timeout s"
        echo "Expected status code is set to $expectedStatus"


        while (true); do

        resp=`curl -s --head -i "$url"`
        httpCode=`echo "$resp" | head -n 1 | cut -d ' ' -f 2`
        responseHeader=`echo "$resp" | grep "$headerName"`



        if [[ $httpCode -eq $expectedStatus ]]; then
          echo "Status is $expectedStatus"

          if [ -z "${headerName}" ]; then
            echo "Not looking for header, all criteria met"
            exit
          fi

          if [[ $responseHeader == *"$expectedHeaderValue"* ]]; then
            echo "Header as expected, all criteria met"
            exit
          else
            echo "Header is not expected: $responseHeader"
          fi
        fi
        echo "Conditions not met, waiting"
        time=$((time + 15))

        echo "Run for $time s"

        if [[ $time -ge $timeout ]]
        then
          echo "Timed out after $timeout seconds"
          exit
        fi


        sleep 15
        done
